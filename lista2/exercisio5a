M = int(input('Insira o numero de amostras: '))
alpha = float(input('Insira a taxa de aprendizagem: '))
mini_batch_lenght = int(input('Insira o comprimento do mini-batch: '))
iterations = int(input('Insira o numero de iteracoes: '))
X_b = np.c_[np.ones((M, 1)), X] # onde X é a matriz dos valores de entrada
# 'y' é a matriz dos valores de saída

a = np.random.randn(2,1)
for iteration in range(iterations):
    matrix=np.ones(shape=(mini_batch_lenght,2))
    matriy=np.ones(shape=(mini_batch_lenght,1))
    for i in range(mini_batch_lenght):
        random_index = np.random.randint(M) 
        xi = X_b[random_index:random_index+1]
        matrix[i] = xi
        yi = y[random_index:random_index+1]
        matriy[i] = yi
    for epoch in range(mini_batch_lenght):
        gradients = -2/mini_batch_lenght * matrix.T.dot(matriy - matrix.dot(a))
        a = a - alpha * gradients
print('Mini-batch gradient-descent\na0: ' + str(a[0][0]) + '\na1: ' + str(a[1][0]) + '\n')
