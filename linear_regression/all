import numpy as np
# Define the number of examples.
M = 1000
# Generate a linear-looking dataset.
X = 2 * np.random.rand(M, 1)
y = 4 + 3 * X + np.random.randn(M, 1)

# Add x0 = 1 to each instance.
X_b = np.c_[np.ones((M, 1)), X]

# Quadratic equation
a_optimum = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(y)

print('Quadratic equation\na0: ' + str(a_optimum[0][0]) + '\na1: ' + str(a_optimum[1][0]) + '\n')

# Constant learning rate.
alpha = 0.1

# Number of iterations.
n_iterations = 1000
# Random initialization.
a = np.random.randn(2,1)
b = a

# Batch gradient-descent loop.
for iteration in range(n_iterations):
    gradients = -2/M * X_b.T.dot(y - X_b.dot(a))
    a = a - alpha * gradients
    
print('Batch gradient-descent\na0: ' + str(a[0][0]) + '\na1: ' + str(a[1][0]) + '\n')

# Online
# Number of epochs.
n_epochs = 50
# Random initialization of parameters.
a = b
# Stocastic gradient-descent loop.
for epoch in range(n_epochs):
    for i in range(M):
        random_index = np.random.randint(M)
        xi = X_b[random_index:random_index+1]
        yi = y[random_index:random_index+1]
        gradients = -2*xi.T.dot(yi - xi.dot(a))
        a = a - alpha * gradients
        
print('Stocastic gradient-descent\na0: ' + str(a[0][0]) + '\na1: ' + str(a[1][0]) + '\n')

# Mini-batch
a = b
mini_batch_lenght = 50
iterations = 200
for iteration in range(iterations):
    matrix=np.ones(shape=(mini_batch_lenght,2))
    matriy=np.ones(shape=(mini_batch_lenght,1))
    for i in range(mini_batch_lenght):
        random_index = np.random.randint(M)
        xi = X_b[random_index:random_index+1]
        matrix[i] = xi
        yi = y[random_index:random_index+1]
        matriy[i] = yi
    for epoch in range(mini_batch_lenght):
        gradients = -2/mini_batch_lenght * matrix.T.dot(matriy - matrix.dot(a))
        a = a - alpha * gradients

print('Mini-batch gradient-descent\na0: ' + str(a[0][0]) + '\na1: ' + str(a[1][0]) + '\n')
